{"version":3,"sources":["services/EmployeeService.js","components/ListEmployeeComponent.jsx","components/HeaderComponent.js","components/FooterComponent.jsx","components/CreateEmployeeComponent.jsx","services/LoginService.js","components/LoginComponent.jsx","services/ImcService.js","components/ListImcComponent.jsx","components/ViewEmployeeComponent.jsx","App.js","serviceWorker.js","index.js"],"names":["EMPLOYEE_API_BASE_URL","axios","get","employee","post","employeeId","put","delete","ListEmployeeComponent","props","state","employees","addEmployee","bind","login","imc","cerrarSesion","editEmployee","deleteEmployee","id","EmployeeService","then","res","setState","filter","this","history","push","getEmployees","console","log","data","content","localStorage","setItem","alert","className","onClick","map","key","idestado","estado","style","marginLeft","viewEmployee","Component","HeaderComponent","href","FooterComponent","CreateEmployeeComponent","saveOrUpdateEmployee","e","preventDefault","firstName","lastName","emailId","JSON","stringify","createEmployee","updateEmployee","changeFirstNameHandler","event","target","value","changeLastNameHandler","changeEmailHandler","match","params","getEmployeeById","getTitle","placeholder","name","onChange","cancel","loginData","LoginComponent","username","password","LoginService","signin","sessionStorage","accessToken","changepasswordHandler","IMC_API_BASE_URL","mytoken","getItem","headers","ListImcComponent","ImcService","getImcs","iduser","ViewEmployeeComponent","App","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a42519a2.chunk.js","sourcesContent":["import axios from 'axios';\n\n//<<<<<<< HEAD\n//const EMPLOYEE_API_BASE_URL = \"http://35.223.20.167:8145/api/auth/estados\";\n//=======\n//const EMPLOYEE_API_BASE_URL = \"http://35.223.20.167:8085/api/auth/estados\";\nconst EMPLOYEE_API_BASE_URL = \"http://34.122.12.31:8145/api/auth/estados\";\n//>>>>>>> dcbbd65485472ffb46ee02dd2a494467c9a597e0\n\nclass EmployeeService {\n\n    getEmployees(){\n        return axios.get(EMPLOYEE_API_BASE_URL);\n    }\n\n    createEmployee(employee){\n        return axios.post(EMPLOYEE_API_BASE_URL, employee);\n    }\n\n    getEmployeeById(employeeId){\n        return axios.get(EMPLOYEE_API_BASE_URL + '/' + employeeId);\n    }\n\n    updateEmployee(employee, employeeId){\n        return axios.put(EMPLOYEE_API_BASE_URL + '/' + employeeId, employee);\n    }\n\n    deleteEmployee(employeeId){\n        return axios.delete(EMPLOYEE_API_BASE_URL + '/' + employeeId);\n    }\n}\n\nexport default new EmployeeService()\n","import React, { Component } from 'react'\nimport EmployeeService from '../services/EmployeeService'\n\nclass ListEmployeeComponent extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n                employees: []\n        }\n        this.addEmployee = this.addEmployee.bind(this);\n        this.login = this.login.bind(this);\n        this.imc = this.imc.bind(this);\n\n        this.cerrarSesion = this.cerrarSesion.bind(this);\n\n        this.editEmployee = this.editEmployee.bind(this);\n        this.deleteEmployee = this.deleteEmployee.bind(this);\n    }\n\n    deleteEmployee(id){\n        EmployeeService.deleteEmployee(id).then( res => {\n            this.setState({employees: this.state.employees.filter(employee => employee.id !== id)});\n        });\n    }\n    viewEmployee(id){\n        this.props.history.push(`/view-employee/${id}`);\n    }\n    editEmployee(id){\n        this.props.history.push(`/add-employee/${id}`);\n    }\n\n    componentDidMount(){\n        //localStorage.setItem('token', null);\n\n        EmployeeService.getEmployees().then((res) => {\n             console.log(res);\n            this.setState({ employees: res.data.content});\n        });\n    }\n\n    addEmployee(){\n        this.props.history.push('/add-employee/_add');\n    }\n\n    imc(){\n        this.props.history.push('/add-imc/_add');\n    }\n\n    login(){\n        this.props.history.push('/login/_add');\n    }\n\n    cerrarSesion(){\n        localStorage.setItem('token', null);\n        alert('Sesion cerrada');\n    }\n\n    render() {\n        return (\n            <div>\n                 <h2 className=\"text-center\">Estados List</h2>\n                 \n                 <div className = \"row\">\n                    <button className=\"btn btn-primary\" onClick={this.addEmployee}> Add Estado</button>\n                    <button className=\"btn btn-primary\" onClick={this.imc}> Imc </button>\n                    <button className=\"btn btn-primary\" onClick={this.login}> Login </button>\n\n                    <button className=\"btn btn-primary\" onClick={this.cerrarSesion}> Cerrar Sesion </button>\n\n                 </div>\n\n                 <br></br>\n                 <div className = \"row\">\n                        <table className = \"table table-striped table-bordered\">\n\n                            <thead>\n                                <tr>\n                                    <th> ID </th>\n                                    <th> id Estado</th>\n                                    <th> Nombre </th>\n                                    <th> Actions</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {\n                                    this.state.employees.map(\n                                        employee => \n                                        <tr key = {employee.id}>\n                                             <td> { employee.id} </td>   \n                                             <td> {employee.idestado}</td>\n                                             <td> {employee.estado}</td>\n                                             <td>\n                                                 <button onClick={ () => this.editEmployee(employee.id)} className=\"btn btn-info\">Update </button>\n                                                 <button style={{marginLeft: \"10px\"}} onClick={ () => this.deleteEmployee(employee.id)} className=\"btn btn-danger\">Delete </button>\n                                                 <button style={{marginLeft: \"10px\"}} onClick={ () => this.viewEmployee(employee.id)} className=\"btn btn-info\">View </button>\n                                             </td>\n                                        </tr>\n                                    )\n                                }\n                            </tbody>\n                        </table>\n\n                 </div>\n\n            </div>\n        )\n    }\n}\n\nexport default ListEmployeeComponent\n","import React, { Component } from 'react'\n\nclass HeaderComponent extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n                 \n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <header>\n                    <nav className=\"navbar navbar-expand-md navbar-dark bg-dark\">\n                    <div><a href=\"https://javaguides.net\" className=\"navbar-brand\">Demo App</a></div>\n                    </nav>\n                </header>\n            </div>\n        )\n    }\n}\n\nexport default HeaderComponent\n","import React, { Component } from 'react'\n\nclass FooterComponent extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n                 \n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <footer className = \"footer\">\n                    <span className=\"text-muted\">All Rights Reserved 2020 @JavaGuides</span>\n                </footer>\n            </div>\n        )\n    }\n}\n\nexport default FooterComponent\n","import React, { Component } from 'react'\nimport EmployeeService from '../services/EmployeeService';\n\nclass CreateEmployeeComponent extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            // step 2\n            id: this.props.match.params.id,\n            firstName: '',\n            lastName: '',\n            emailId: ''\n        }\n        this.changeFirstNameHandler = this.changeFirstNameHandler.bind(this);\n        this.changeLastNameHandler = this.changeLastNameHandler.bind(this);\n        this.saveOrUpdateEmployee = this.saveOrUpdateEmployee.bind(this);\n    }\n\n    // step 3\n    componentDidMount(){\n\n        // step 4\n        if(this.state.id === '_add'){\n            return\n        }else{\n            EmployeeService.getEmployeeById(this.state.id).then( (res) =>{\n                let employee = res.data;\n                this.setState({firstName: employee.firstName,\n                    lastName: employee.lastName,\n                    emailId : employee.emailId\n                });\n            });\n        }        \n    }\n    saveOrUpdateEmployee = (e) => {\n        e.preventDefault();\n        let employee = {firstName: this.state.firstName, lastName: this.state.lastName, emailId: this.state.emailId};\n        console.log('employee => ' + JSON.stringify(employee));\n\n        // step 5\n        if(this.state.id === '_add'){\n            EmployeeService.createEmployee(employee).then(res =>{\n                this.props.history.push('/employees');\n            });\n        }else{\n            EmployeeService.updateEmployee(employee, this.state.id).then( res => {\n                this.props.history.push('/employees');\n            });\n        }\n    }\n    \n    changeFirstNameHandler= (event) => {\n        this.setState({firstName: event.target.value});\n    }\n\n    changeLastNameHandler= (event) => {\n        this.setState({lastName: event.target.value});\n    }\n\n    changeEmailHandler= (event) => {\n        this.setState({emailId: event.target.value});\n    }\n\n    cancel(){\n        this.props.history.push('/employees');\n    }\n\n    getTitle(){\n        if(this.state.id === '_add'){\n            return <h3 className=\"text-center\">Add Employee</h3>\n        }else{\n            return <h3 className=\"text-center\">Update Employee</h3>\n        }\n    }\n    render() {\n        return (\n            <div>\n                <br></br>\n                   <div className = \"container\">\n                        <div className = \"row\">\n                            <div className = \"card col-md-6 offset-md-3 offset-md-3\">\n                                {\n                                    this.getTitle()\n                                }\n                                <div className = \"card-body\">\n                                    <form>\n                                        <div className = \"form-group\">\n                                            <label> First Name: </label>\n                                            <input placeholder=\"First Name\" name=\"firstName\" className=\"form-control\" \n                                                value={this.state.firstName} onChange={this.changeFirstNameHandler}/>\n                                        </div>\n                                        <div className = \"form-group\">\n                                            <label> Last Name: </label>\n                                            <input placeholder=\"Last Name\" name=\"lastName\" className=\"form-control\" \n                                                value={this.state.lastName} onChange={this.changeLastNameHandler}/>\n                                        </div>\n                                        <div className = \"form-group\">\n                                            <label> Email Id: </label>\n                                            <input placeholder=\"Email Address\" name=\"emailId\" className=\"form-control\" \n                                                value={this.state.emailId} onChange={this.changeEmailHandler}/>\n                                        </div>\n\n                                        <button className=\"btn btn-success\" onClick={this.saveOrUpdateEmployee}>Save</button>\n                                        <button className=\"btn btn-danger\" onClick={this.cancel.bind(this)} style={{marginLeft: \"10px\"}}>Cancel</button>\n                                    </form>\n                                </div>\n                            </div>\n                        </div>\n\n                   </div>\n            </div>\n        )\n    }\n}\n\nexport default CreateEmployeeComponent\n","import axios from 'axios';\n\n//const LOGIN_API_BASE_URL = \"http://localhost:8080/api/auth/signin\";\nconst LOGIN_API_BASE_URL = \"http://34.122.12.31:8145/api/auth/signin\";\n\nclass LoginService {\n    signin(loginData){\n        return axios.post(LOGIN_API_BASE_URL,\n            loginData);\n    }\n}\n\nexport default new LoginService()","import React, { Component } from 'react'\nimport LoginService from '../services/LoginService';\n\nclass LoginComponent extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            // step 2\n            id: this.props.match.params.id,\n            password: '',\n            emailId: ''\n        }\n        this.changepasswordHandler = this.changepasswordHandler.bind(this);\n        this.saveOrUpdateEmployee = this.saveOrUpdateEmployee.bind(this);\n    }\n\n    // step 3\n    componentDidMount(){\n\n        // step 4\n        /*\n        if(this.state.id === '_add'){\n            return\n        }else{\n            LoginService.getEmployeeById(this.state.id).then( (res) =>{\n                let employee = res.data;\n                this.setState({password: employee.password,\n                    lastName: employee.lastName,\n                    emailId : employee.emailId\n                });\n            });\n        } */       \n    }\n    saveOrUpdateEmployee = (e) => {\n        e.preventDefault();\n        let loginData = {username: this.state.emailId, password: this.state.password};\n        console.log('login data => ' + JSON.stringify(loginData));\n\n        // step 5\n        if(this.state.id === '_add'){\n            LoginService.signin(loginData).then(res =>{\n                console.log(res.data);\n                sessionStorage.setItem('token', res.data.accessToken);\n\n                //console.log(res.data.accessToken);\n                \n                //this.props.history.push('/employees');\n            });\n        }else{\n           /* EmployeeService.updateEmployee(loginData, this.state.id).then( res => {\n                this.props.history.push('/employees');\n            }); */\n        }\n    }\n    \n    changepasswordHandler= (event) => {\n        this.setState({password: event.target.value});\n    }\n/*\n    changeLastNameHandler= (event) => {\n        this.setState({lastName: event.target.value});\n    }\n*/\n    changeEmailHandler= (event) => {\n        this.setState({emailId: event.target.value});\n    }\n\n    cancel(){\n        this.props.history.push('/employees');\n    }\n\n    getTitle(){\n        if(this.state.id === '_add'){\n            return <h3 className=\"text-center\">Login </h3>\n        }else{\n            return <h3 className=\"text-center\">Login Employee</h3>\n        }\n    }\n    render() {\n        return (\n            <div>\n                <br></br>\n                   <div className = \"container\">\n                        <div className = \"row\">\n                            <div className = \"card col-md-6 offset-md-3 offset-md-3\">\n                                {\n                                    this.getTitle()\n                                }\n                                <div className = \"card-body\">\n                                    <form>\n                                        \n                                        <div className = \"form-group\">\n                                            <label> Email: </label>\n                                            <input placeholder=\"email\" name=\"email\" className=\"form-control\" \n                                                value={this.state.emailId} onChange={this.changeEmailHandler}/>\n                                        </div>\n\n                                        <div className = \"form-group\">\n                                            <label> Password : </label>\n                                            <input placeholder=\"Password \" name=\"password\" className=\"form-control\" \n                                                value={this.state.password} onChange={this.changepasswordHandler}/>\n                                        </div>\n                                        \n                                        \n                                        <button className=\"btn btn-success\" onClick={this.saveOrUpdateEmployee}> Login </button>\n                                        <button className=\"btn btn-danger\" onClick={this.cancel.bind(this)} style={{marginLeft: \"10px\"}}>Cancel</button>\n                                    </form>\n                                </div>\n                            </div>\n                        </div>\n\n                   </div>\n            </div>\n        )\n    }\n}\n\nexport default LoginComponent\n","import axios from 'axios';\n\n//const EMPLOYEE_API_BASE_URL = \"http://35.223.20.167:8085/api/auth/estados\";\n//const IMC_API_BASE_URL = \"http://localhost:8080/imcs\";\nconst IMC_API_BASE_URL = \"http://34.122.12.31:8145/imcs\";\n\nclass ImcService {\n\n    getImcs(){\n        var mytoken = sessionStorage.getItem('token') || '';\n\n        return axios.get(IMC_API_BASE_URL, {\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${mytoken}`\n            },\n        });\n    }\n\n    createEmployee(employee){\n        return axios.post(IMC_API_BASE_URL, employee);\n    }\n\n    getEmployeeById(employeeId){\n        return axios.get(IMC_API_BASE_URL + '/' + employeeId);\n    }\n\n    updateEmployee(employee, employeeId){\n        return axios.put(IMC_API_BASE_URL + '/' + employeeId, employee);\n    }\n\n    deleteEmployee(employeeId){\n        return axios.delete(IMC_API_BASE_URL + '/' + employeeId);\n    }\n}\n\nexport default new ImcService()","import React, { Component } from 'react'\nimport ImcService from '../services/ImcService'\n\nclass ListImcComponent extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n                employees: []\n        }\n        this.addEmployee = this.addEmployee.bind(this);\n        this.login = this.login.bind(this);\n        this.cerrarSesion = this.cerrarSesion.bind(this);\n\n        this.editEmployee = this.editEmployee.bind(this);\n        this.deleteEmployee = this.deleteEmployee.bind(this);\n    }\n\n    deleteEmployee(id){\n        ImcService.deleteEmployee(id).then( res => {\n            this.setState({employees: this.state.employees.filter(employee => employee.id !== id)});\n        });\n    }\n    viewEmployee(id){\n        this.props.history.push(`/view-employee/${id}`);\n    }\n    editEmployee(id){\n        this.props.history.push(`/add-employee/${id}`);\n    }\n\n    componentDidMount(){\n        //localStorage.setItem('token', null);\n\n        ImcService.getImcs().then((res) => {\n            console.log('imcs ');\n            console.log(res);\n            this.setState({ employees: res.data.content});\n        });\n    }\n\n    addEmployee(){\n        this.props.history.push('/add-employee/_add');\n    }\n\n    login(){\n        this.props.history.push('/login/_add');\n    }\n\n    cerrarSesion(){\n        localStorage.setItem('token', null);\n        alert('Sesion cerrada');\n    }\n\n    render() {\n        return (\n            <div>\n                 <h2 className=\"text-center\">IMC demo (token)</h2>\n                 \n                 \n                 <br></br>\n                 <div className = \"row\">\n                        <table className = \"table table-striped table-bordered\">\n\n                            <thead>\n                                <tr>\n                                    <th> ID </th>\n                                    <th> id usuario</th>\n                                    <th> imc </th>\n                                    <th> Actions</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {\n                                    this.state.employees.map(\n                                        employee => \n                                        <tr key = {employee.id}>\n                                             <td> { employee.id} </td>   \n                                             <td> {employee.iduser}</td>\n                                             <td> {employee.imc}</td>\n                                             <td>\n                                                 <button onClick={ () => this.editEmployee(employee.id)} className=\"btn btn-info\">Update </button>\n                                                 <button style={{marginLeft: \"10px\"}} onClick={ () => this.deleteEmployee(employee.id)} className=\"btn btn-danger\">Delete </button>\n                                                 <button style={{marginLeft: \"10px\"}} onClick={ () => this.viewEmployee(employee.id)} className=\"btn btn-info\">View </button>\n                                             </td>\n                                        </tr>\n                                    )\n                                }\n                            </tbody>\n                        </table>\n\n                 </div>\n\n            </div>\n        )\n    }\n}\n\nexport default ListImcComponent\n","import React, { Component } from 'react'\nimport EmployeeService from '../services/EmployeeService'\n\nclass ViewEmployeeComponent extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            id: this.props.match.params.id,\n            employee: {}\n        }\n    }\n\n    componentDidMount(){\n        EmployeeService.getEmployeeById(this.state.id).then( res => {\n            this.setState({employee: res.data});\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <br></br>\n                <div className = \"card col-md-6 offset-md-3\">\n                    <h3 className = \"text-center\"> View Employee Details</h3>\n                    <div className = \"card-body\">\n                        <div className = \"row\">\n                            <label> Employee First Name: </label>\n                            <div> { this.state.employee.firstName }</div>\n                        </div>\n                        <div className = \"row\">\n                            <label> Employee Last Name: </label>\n                            <div> { this.state.employee.lastName }</div>\n                        </div>\n                        <div className = \"row\">\n                            <label> Employee Email ID: </label>\n                            <div> { this.state.employee.emailId }</div>\n                        </div>\n                    </div>\n\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ViewEmployeeComponent\n","import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom'\nimport ListEmployeeComponent from './components/ListEmployeeComponent';\nimport HeaderComponent from './components/HeaderComponent';\nimport FooterComponent from './components/FooterComponent';\nimport CreateEmployeeComponent from './components/CreateEmployeeComponent';\nimport LoginComponent from './components/LoginComponent';\nimport ListImcComponent from './components/ListImcComponent';\n\n//import UpdateEmployeeComponent from './components/UpdateEmployeeComponent';\nimport ViewEmployeeComponent from './components/ViewEmployeeComponent';\n\nfunction App() {\n  return (\n    <div>\n        <Router>\n              <HeaderComponent />\n                <div className=\"container\">\n                    <Switch> \n                          <Route path = \"/\" exact component = {ListEmployeeComponent}></Route>\n                          <Route path = \"/employees\" component = {ListEmployeeComponent}></Route>\n                          <Route path = \"/add-imc/:id\" component = {ListImcComponent}></Route>\n                          <Route path = \"/add-employee/:id\" component = {CreateEmployeeComponent}></Route>\n                          <Route path = \"/login/:id\" component = {LoginComponent}></Route>\n                          <Route path = \"/view-employee/:id\" component = {ViewEmployeeComponent}></Route>\n                          {/* <Route path = \"/update-employee/:id\" component = {UpdateEmployeeComponent}></Route> */}\n                    </Switch>\n                </div>\n              <FooterComponent />\n        </Router>\n    </div>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}